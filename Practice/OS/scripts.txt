E:\SkillBox Python\Python_Basic\greatest_teamplate.py

while True:
    greatest_teamplate = input('Введите шаблон поздравления(Должен содержать конструкцию {name} и {age}): ')
    if '{name}' in greatest_teamplate and '{age}' in greatest_teamplate:
        break
    else:
        print('Нет необходимых конструкций')

names_list = input('Введите имена с фамилиями через запятую: ').split(', ')
ages_str = input('Возраст людей через пробел: ')
ages_list = [int(i_age) for i_age in ages_str.split()]

for i_man in range(len(names_list)):
    print(greatest_teamplate.format(name=names_list[i_man], age=ages_list[i_man]))

people_list = [
    ': '.join([names_list[i_man], str(ages_list[i_man])])
    for i_man in range(len(names_list))
]
print(', '.join(people_list))

********************************************************************************

E:\SkillBox Python\Python_Basic\Module14\01_os_info\main.py

import platform
import sys

info = 'OS info is \n{}\n\nPython version is {} {}'.format(
    platform.uname(),
    sys.version,
    platform.architecture(),
)

print('Системная информация:')
print(info)

with open('os_info.txt', 'w', encoding='utf8') as file:
    file.write(info)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module14\02_sum_and_dif\main.py

def sum_num(num):
    sum_number = 0
    while num != 0:
        sum_number += num % 10
        num //= 10
    return sum_number


def quantity_num(num):
    count = 0
    while num != 0:
        count += 1
        num //= 10
    return count


user_num = int(input('Введите целое, положительное число: '))
print(f'Сумма цифр введенного числа: {sum_num(user_num)}')
print(f'Количество цифр в числе: {quantity_num(user_num)}')
print(f'Разность суммы и количества цифр: {sum_num(user_num) - quantity_num(user_num)}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module14\03_least_divisor\main.py

def min_divider(num):
    for i in range(2, num + 1):
        if num % i == 0:
            return i


user_num = int(input('Введите число: '))
print(f'Наименьший делитель, отличный от единицы: {min_divider(user_num)}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module15\01_list_gen\main.py

user_num = int(input('Введите число: '))
num_list = []

for i in range(1, user_num + 1, 2):
    num_list.append(i)

print(f'Список из нечётных чисел от одного до {user_num}: {num_list}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module15\02_tournament\main.py

name_list = ['Артемий', 'Борис', 'Влад', 'Гоша', 'Дима', 'Евгений', 'Женя', 'Захар']
first_day_list = []

for i, name in enumerate(name_list):
    if i % 2 == 0:
        first_day_list.append(name_list[i])

print(first_day_list)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module15\03_videocards\main.py

vcard_count = int(input('Введите количество видеокарт: '))
vcard_list = []
new_vcard_list = []
max_ID = max(vcard_list)

for _ in range(vcard_count):
    print('Введите модель видеокарты:', end=' ')
    vcard_list.append(int(input()))

print(f'Количество видеокарт: {len(vcard_list)}')

for i, ID in enumerate(vcard_list):
    print(f'Видеокарта {i + 1}: {ID}')

for card in vcard_list:
    if card == max_ID:
        continue
    else:
        new_vcard_list.append(card)

print(f'Старый список видеокарт: {vcard_list}')
print(f'Новый список видеокарт: {new_vcard_list}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module15\04_movie\main.py

films = ['Крепкий орешек', 'Назад в будущее', 'Таксист',
         'Леон', 'Богемская рапсодия', 'Город грехов',
         'Мементо', 'Отступники', 'Деревня']
favorite_films = []
films_count = int(input('Сколько фильмов хотите добавить? '))

for _ in range(films_count):
    print('Введите название фильма:', end=' ')
    film = input()
    while film not in films:
        print(f'Ошибка: фильма {film} у нас нет :(')
        film = input('Введите название фильма: ')
    favorite_films.append(film)

print(f'Ваш список любимых фильмов:', end=' ')
for i in favorite_films:
    print(f'{i},', end=' ')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module15\05_containers\main.py

container_count = int(input('Введите количество контейнеров: '))
container_list = []

for i in range(container_count):
    print('Введите вес контейнера:', end=' ')
    container = int(input())
    while container > 200:
        print('Вес контейнера не должен превышать 200кг')
        container = int(input('Введите вес контейнера: '))
    container_list.append(container)
else:
    list.sort(container_list, reverse=True)

print(container_list)
new_container = int(input('Введите вес нового контейнера: '))
new_container_point = 1

for i in range(len(container_list)):
    if new_container <= container_list[i]:
        new_container_point += 1

print(f'Номер, который получит новый контейнер: {new_container_point}')

********************************************************************************

E:\SkillBox Python\Python_Basic\Module15\06_running_nums\main.py

num_count = int(input('Кол-во чисел в списке: '))
numbers_list = []
new_numbers_list = []

for _ in range(num_count):
    print('Введите число:', end=' ')
    numbers_list.append(int(input()))

shift = int(input('Сдвиг: '))
while shift > num_count:
    print(f'Сдвиг не может быть больше кол-ва чисел ({num_count})')
    shift = int(input('Сдвиг: '))

index = - shift

for _ in range(num_count):
    new_numbers_list.append(numbers_list[index])
    index += 1

print(f'Изначальный список: {numbers_list}\nСдвинутый список: {new_numbers_list}')



********************************************************************************

E:\SkillBox Python\Python_Basic\Module15\07_word_analysis_2\main.py

user_word = input('Введите слово: ')
user_word = user_word.lower()
revers_word = user_word[::-1]

if user_word == revers_word:
    print('Слово является палиндромом')
else:
    print('Слово не является палиндромом')

********************************************************************************

E:\SkillBox Python\Python_Basic\Module15\08_sort\main.py

num_list = [10, 3, -5, 0, 45, 23, 8, 0, 10]


def list_sort(user_list):
    for index_1 in range(len(user_list)):
        for index_2 in range(index_1 + 1, len(user_list)):
            if user_list[index_1] >= user_list[index_2]:
                user_list[index_1], user_list[index_2] = user_list[index_2], user_list[index_1]


list_sort(num_list)

print(num_list)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module15\09_reverse_analysis\main.py

def list_sort(user_list):
    for index_1 in range(len(user_list)):
        for index_2 in range(index_1 + 1, len(user_list)):
            if user_list[index_1] <= user_list[index_2]:
                user_list[index_1], user_list[index_2] = user_list[index_2], user_list[index_1]


numbers_list = [7, 14, 3, 18, 21, 10, 9, 6]
list_sort(numbers_list)

for i in range(len(numbers_list) - 1, -1, -1):
    num = numbers_list[i]
    if num % 2 != 0:
        numbers_list.remove(num)

print(numbers_list)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module16\01_scary_code\main.py

a = [1, 5, 3]
b = [1, 5, 1, 5]
c = [1, 3, 1, 5, 3, 3]

a.extend(b)
t = a.count(5)
print(f'Количество цифр 5 при первом объединении: {t}')

for _ in range(t):
    a.remove(5)

a.extend(c)
t = a.count(3)
print(f'Количество цифр 3 при втором объединении: {t}')
print(f'Итоговый список: {a}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module16\02_unique_combination\main.py

def merge_sorted_lists(first_list, second_list):
    first_list.extend(second_list)
    for i_fl in first_list:
        if first_list.count(i_fl) > 1:
            first_list.remove(i_fl)
    return sorted(first_list)


# Пример использования:
list1 = [1, 3, 5, 7, 9]
list2 = [2, 4, 6, 8, 10]
merged = merge_sorted_lists(list1, list2)
print(merged)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module16\03_details\main.py

shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300],
        ['педаль', 100], ['седло', 1500], ['рама', 12000],
        ['обод', 2000], ['шатун', 200], ['седло', 2700]]

total_goods = 0
total_cost = 0
user_input = input('Введите название детали: ')

for prod, cost in shop:
    if user_input == prod:
        total_goods += 1
        total_cost += cost

print(f'Кол-во деталей: {total_goods}\n'
      f'Общая стоимость: {total_cost}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module16\04_party\main.py

guests = ['Петя', 'Ваня', 'Саша', 'Лиза', 'Катя']
guests_count = len(guests)
user_input = ''

while user_input != 'пора спать':
    print(f'Сейчас на вечеринке {guests_count} человек: {guests}')
    user_input = input('Гость пришёл или ушёл? ')
    if user_input == 'пришел':
        guest_name = input('Имя гостя: ')
        if guests_count < 6:
            print(f'Привет {guest_name}')
            guests.append(guest_name)
            guests_count = len(guests)
        else:
            print(f'Прости, {guest_name}, но мест нет :(')
    if user_input == 'ушел':
        guest_name = input('Имя гостя: ')
        if guest_name not in guests:
            print(f'На вечеринке нет гостя с именем {guest_name}')
            guest_name = input('Имя гостя: ')
        print(f'Пока, {guest_name}')
        guests.remove(guest_name)
        guests_count = len(guests)

print('Вечеринка закончилась, все легли спать.')

********************************************************************************

E:\SkillBox Python\Python_Basic\Module16\05_songs\main.py

violator_songs = [
    ['World in My Eyes', 4.86],
    ['Sweetest Perfection', 4.43],
    ['Personal Jesus', 4.56],
    ['Halo', 4.9],
    ['Waiting for the Night', 6.07],
    ['Enjoy the Silence', 4.20],
    ['Policy of Truth', 4.76],
    ['Blue Dress', 4.29],
    ['Clean', 5.83]
]

songs_count = int(input('Сколько песен выбрать? '))
total_time = 0

for i in range(1, songs_count + 1):
    print(f'Название {i}-й песни:', end=' ')
    user_input = input()
    for songs in violator_songs:
        if songs[0] == user_input:
            total_time += songs[1]

print(f'Общее время звучания песен — {round(total_time, 2)} минуты')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module16\06_roller_skates\main.py

rolls_list = []
humans_list = []
roll_count = int(input('Количество роликов: '))

for i in range(1, roll_count + 1):
    print(f'Размер пары {i}: ', end='')
    size = int(input())
    rolls_list.append(size)

humans_count = int(input('Количество людей: '))
hum_in_rolls = 0

for i in range(1, humans_count + 1):
    print(f'Размер ноги человека {i}: ', end='')
    size = int(input())
    humans_list.append(size)
    if size in rolls_list:
        hum_in_rolls += 1
        rolls_list.remove(size)

print(f'Наибольшее количество людей, которые могут взять ролики: {hum_in_rolls}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module16\07_rhyme_cnt\main.py

num_of_per = int(input('Кол-во человек: '))
persons_list = list(range(1, num_of_per + 1))
out_per_num = int(input('Какое число в считалке? '))
print(f'Значит, выбывает каждый {out_per_num}-й человек')
i_per = 0
out_per = 0

while len(persons_list) > 1:
    print(f'Текущий круг людей: {persons_list}')
    start_num = i_per % len(persons_list)
    print(f'Начало счёта с номера {persons_list[start_num]}')
    i_per = (i_per + out_per_num - 1) % len(persons_list)
    out_per = persons_list.pop(i_per)
    print(f'Выбывает человек под номером {out_per}')

print(f'\nОстался человек под номером: {persons_list[0]}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module16\08_simmetrical_seq\main.py

num_quantity = int(input('Введите количество чисел: '))
numbers = [int(input('Введите число: ')) for _ in range(num_quantity)]
add_nums = []

if numbers == numbers[::-1]:
    print(f'Последовательность {numbers} симметрична, ничего добавлять не нужно.')
else:
    for i_num in range(0, len(numbers)):
        if numbers[i_num:] == numbers[:i_num - 1: -1]:
            add_nums = numbers[:i_num]
            add_nums.reverse()
            break

    print(f'Последовательность чисел: {numbers}\n'
          f'Нужно приписать чисел: {len(add_nums)}\n'
          f'Сами числа: {add_nums}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module17\01_vowels\main.py

vowel_in_text = [vow for vow in input('Введите текст: ') if vow.lower() in 'аеёиоуыэюя']

print(f'Список гласных букв: {vowel_in_text}\n'
      f'Длина списка: {len(vowel_in_text)}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module17\02_generation\main.py

user_num = int(input('Введите длину списка: '))
sequence = [1 if num % 2 == 0 else num % 5 for num in range(user_num)]

print(sequence)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module17\03_random_competition\main.py

import random


def max_score(list_1, list_2, index):
    return max(list_1[index], list_2[index])


team_1 = [round(random.uniform(5, 10), 2) for _ in range(20)]
team_2 = [round(random.uniform(5, 10), 2) for _ in range(20)]
winners = [max_score(team_1, team_2, i_team) for i_team in range(20)]

print(f'Первая команда: {team_1}\n'
      f'Вторая команда: {team_2}\n'
      f'Победители тура: {winners}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module17\04_slices\main.py

alphabet = 'abcdefg'

print(f'{alphabet[:]}\n'
      f'{alphabet[::-1]}\n'
      f'{alphabet[::2]}\n'
      f'{alphabet[1::2]}\n'
      f'{alphabet[:1:]}\n'
      f'{alphabet[:len(alphabet) - 2:-1]}\n'
      f'{alphabet[3:4]}\n'
      f'{alphabet[len(alphabet) - 3::]}\n'
      f'{alphabet[3:5]}\n'
      f'{alphabet[4:2:-1]}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module17\05_reversal\main.py

txt = input('Введите строку: ')

print(f'Развёрнутая последовательность между первым и последним h: '
      f'{txt[txt.rindex("h") - 1: txt.index("h"): -1]}')



********************************************************************************

E:\SkillBox Python\Python_Basic\Module17\06_two_dimensional_list\main.py

numbers_list = [[num for num in range(i, 13, 4)] for i in range(1, 5)]

print(numbers_list)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module17\07_list_of_lists_2\main.py

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]],
             [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

answer = [num for i in range(len(nice_list)) for j in range(len(nice_list[i])) for num in nice_list[i][j]]

print(answer)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module17\08_caesar_cipher\main.py

def encryption(txt, shift):
    letter_list = [(alphabet[(alphabet.index(letter) + shift) % 33]
                   if letter != ' '
                   else ' ')
                   for letter in txt]
    encryption_txt = ''.join(letter_list)
    return encryption_txt


alphabet = [chr(i) for i in range(ord('а'), ord('я') + 1)]
alphabet.insert(6, 'ё')

user_txt = input('Введите сообщение: ').lower()
user_shift = int(input('Введите сдвиг: '))
print(f'Зашифрованное сообщение: "{encryption(user_txt, user_shift)}"')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module18\01_restaurant_menu\main.py

menu = input('Доступное меню: ').split(';')
print(f'Сейчас в меню есть: {", ".join(menu)}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module18\02_longest_word\main.py

input_str = input('Введите строку: ').split(' ')

max_len = max(len(word) for word in input_str)
max_word = ''

for word in input_str:
    if len(word) == max_len:
        max_word = word
        break

if max_len == 1:
    ending = ''
elif 1 < max_len < 5:
    ending = 'а'
else:
    ending = 'ов'

print(f'Самое длинное слово: {max_word}\n'
      f'Длина этого слова: {max_len} символ{ending}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module18\03_files\main.py

invalid_chr = ('@', '№', '$', '%', '^', '&', '*', '()')
file_extension = ('.txt', '.docx')
user_input = input('Название файла: ')

if user_input.startswith(invalid_chr):
    print('Ошибка: название начинается недопустимым символом.')
elif not user_input.endswith(file_extension):
    print('Ошибка: неверное расширение файла. Ожидалось .txt или .docx')
else:
    print('Файл назван верно')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module18\04_capital_letters\main.py

user_input = input('Введите строку: ')
f_str = user_input.title()

print(f'Результат: {f_str}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module18\05_password\main.py

while True:
    user_pass = input('Придумайте пароль: ')
    if len([letter for letter in user_pass if letter.isupper()]) < 1\
            or len([digit for digit in user_pass if digit.isdigit()]) < 3\
            or len(user_pass) < 8:
        print('Пароль ненадёжный. Попробуйте ещё раз.')
    else:
        print('Это надёжный пароль.')
        break


********************************************************************************

E:\SkillBox Python\Python_Basic\Module18\06_compression\main.py

user_input = input('Введите строку: ')
count = 1
output_list = []
for i in range(len(user_input)):
    if user_input[i] == user_input[i + 1: i + 2]:
        count += 1
        continue
    output_list.append(user_input[i] + str(count))
    count = 1
output_str = ''.join(output_list)
print(f'Закодированная строка: {output_str}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module18\07_ip_adress_2\main.py

while True:
    ip_address = input('Введите IP: ')
    if ',' in ip_address:
        print(f'Адрес — это четыре числа, разделённые точками')
        continue

    ip_address = ip_address.split('.')

    for num in ip_address:
        if not num.isnumeric():
            print(f'{num} — это не целое число')
            ip_address = 0
            break
        elif int(num) > 255:
            print(f'{num} превышает 255')
            ip_address = 0
            break
    if ip_address:
        print('IP-адрес корректен')
        break



********************************************************************************

E:\SkillBox Python\Python_Basic\Module18\08_ticker\main.py

input_str_1 = 'abcde'
input_str_2 = 'cdeab'
start_sym = input_str_1.find(input_str_2[0])

if input_str_2.startswith(''.join(input_str_1[start_sym:])) and input_str_2.endswith(''.join(input_str_1[:start_sym])):
    print(f'Первая строка получается из второй со сдвигом {start_sym}')
else:
    print('Первую строку нельзя получить из второй с помощью циклического сдвига')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module18\09_comment_analysis\main.py

def count_uppercase_lowercase(txt):
    upper = [sym for sym in txt if sym.isupper()]
    lower = [sym for sym in txt if sym.islower()]
    return len(upper), len(lower)


# Пример использования:
text = input("Введите строку для анализа: ")
uppercase, lowercase = count_uppercase_lowercase(text)
print("Количество заглавных букв:", uppercase)
print("Количество строчных букв:", lowercase)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module19\01_songs_2\main.py

violator_songs = {
    'World in My Eyes': 4.86,
    'Sweetest Perfection': 4.43,
    'Personal Jesus': 4.56,
    'Halo': 4.9,
    'Waiting for the Night': 6.07,
    'Enjoy the Silence': 4.20,
    'Policy of Truth': 4.76,
    'Blue Dress': 4.29,
    'Clean': 5.83
}
num_dict = {
    1: 'первой',
    2: 'второй',
    3: 'третьей',
    4: 'четвертой',
    5: 'пятой',
    6: 'шестой',
    7: 'седьмой',
    8: 'восьмой',
    9: 'девятой'
}
playing_time = 0
num_songs = int(input('Введите количество песен: '))

for num in range(1, num_songs + 1):
    user_song = input(f'Введите название {num_dict[num]} песни: ')
    while user_song not in violator_songs:
        print('Такой песни нет :(')
        user_song = input(f'Введите название {num_dict[num]} песни: ')
    playing_time += violator_songs.get(user_song)

print(f'Общее время звучания песен: {round(playing_time, 2)}мин')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module19\02_cryptocurrency\main.py

data = {
    "address": "0x544444444444",
    "ETH": {
        "balance": 444,
        "total_in": 444,
        "total_out": 4
    },
    "count_txs": 2,
    "tokens": [
        {
            "fst_token_info": {
                "address": "0x44444",
                "name": "fdf",
                "decimals": 0,
                "symbol": "dsfdsf",
                "total_supply": "3228562189",
                "owner": "0x44444",
                "last_updated": 1519022607901,
                "issuances_count": 0,
                "holders_count": 137528,
                "price": False
            },
            "balance": 5000,
            "totalIn": 0,
            "total_out": 0
        },
        {
            "sec_token_info": {
                "address": "0x44444",
                "name": "ggg",
                "decimals": "2",
                "symbol": "fff",
                "total_supply": "250000000000",
                "owner": "0x44444",
                "last_updated": 1520452201,
                "issuances_count": 0,
                "holders_count": 20707,
                "price": False
            },
            "balance": 500,
            "totalIn": 0,
            "total_out": 0
        }
    ]
}

for key, vol in data.items():
    print(f'Ключ: {key}\nЗначение: {vol}')

data['ETH'].update({'total_diff': 100})
data['tokens'][0]['fst_token_info']['name'] = 'doge'
data['ETH']['total_out'] += data['tokens'][0].pop('total_out') + data['tokens'][1].pop('total_out')
data['tokens'][1]['sec_token_info']['total_price'] = data['tokens'][1]['sec_token_info'].pop('price')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module19\03_goods\main.py

def create_total_dict(dictionary, d_key):
    total_quantity = 0
    total_price = 0
    for item in dictionary[d_key]:
        total_quantity += item['quantity']
        total_price += item['quantity'] * item['price']
    return total_quantity, total_price


goods = {
    'Лампа': '12345',
    'Стол': '23456',
    'Диван': '34567',
    'Стул': '45678',
}

store = {
    '12345': [
        {'quantity': 27, 'price': 42},
    ],
    '23456': [
        {'quantity': 22, 'price': 510},
        {'quantity': 32, 'price': 520},
    ],
    '34567': [
        {'quantity': 2, 'price': 1200},
        {'quantity': 1, 'price': 1150},
    ],
    '45678': [
        {'quantity': 50, 'price': 100},
        {'quantity': 12, 'price': 95},
        {'quantity': 43, 'price': 97},
    ],
}

for key, val in goods.items():
    quantity, price = create_total_dict(store, val)
    print(f'{key} - {quantity} штук, стоимость {price} рублей')


for i_name in goods.keys():
    total_quantity = 0
    total_cost = 0
    for j_good in store[goods[i_name]]:
        total_quantity += j_good['quantity']
        total_cost += j_good['price'] * j_good['quantity']
    print('{} - {} шт, стоимость {} руб'.format(
        i_name, total_quantity, total_cost))


********************************************************************************

E:\SkillBox Python\Python_Basic\Module19\04_frequency_hist_2\main.py

def count_sym(txt):
    txt_dict = {
        sym: txt.count(sym)
        for sym in txt
    }
    return txt_dict


def invert(dictionary):
    invert_dict = {
        d_key: [sym for sym in dictionary.keys() if dictionary[sym] == d_key]
        for d_key in dictionary.values()
    }
    return invert_dict


user_input = input('Введите текст: ')
user_input_dict = count_sym(user_input)
user_invert_dict = invert(user_input_dict)

print('Оригинальный словарь частот:')

for key, val in user_input_dict.items():
    print(f'{key}: {val}')

print('Инвертированный словарь частот:')

for key, val in user_invert_dict.items():
    print(f'{key}: {val}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module19\05_synonym_dict\main.py

def check_word(word, dictionary):
    # Функция проверяет наличие слова в словаре
    if word in dictionary.values() or word in dictionary.keys():
        return True
    else:
        return False


def synonym(word, dictionary):
    # Функция выводит на экран синоним к слову word из словаря dictionary
    for key, val in dictionary.items():
        if word == key:
            print(f'Синоним: {val.title()}')
            break
        if word == val:
            print(f'Синоним: {key.title()}')
            break


def create_synonym_dict(count):
    # Функция создает словарь синонимов из пар слов
    dictionary = dict()
    for num in range(1, count + 1):
        key, val = input(f'{num} пара слов: ').lower().split(' - ')
        dictionary[key] = val
    return dictionary


word_count = int(input('Введите количество пар слов: '))
synonym_dict = create_synonym_dict(word_count)

while True:
    user_input = input('Введите слово: ')
    if check_word(user_input, synonym_dict):
        break
    else:
        print('Такого слова в словаре нет.')

synonym(user_input, synonym_dict)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module19\06_pizza\main.py

def processing_orders(num):
    # Функция создает словарь заказов
    num_word = {
        1: 'Первый',
        2: 'Второй',
        3: 'Третий',
        4: 'Четвертый',
        5: 'Пятый',
        6: 'Шестой',
        7: 'Седьмой',
        8: 'Восьмой',
        9: 'Девятый'
    }
    orders = dict()
    for order in range(1, num + 1):
        customer, pizza, quantity = input(f'{num_word[order]} заказ: ').split()
        quantity = int(quantity)
        if customer in orders:
            if pizza in orders[customer]:
                orders[customer][pizza] += quantity
            else:
                orders[customer][pizza] = quantity
        else:
            orders[customer] = {pizza: quantity}
    return orders


def print_orders(order):
    # Функция выводит на экран заказы отсортированные по фамилии клиента
    for customer in sorted(order):
        print(f'{customer}: ')
        for pizza in order[customer]:
            print(f'     {pizza}: {order[customer][pizza]}')


order_count = int(input('Введите количество заказов: '))
current_orders = processing_orders(order_count)
print_orders(current_orders)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module19\07_three_lists\main.py

def no_set(a, b, c, task_num):
    if task_num == 1:  # Выводим на экран елементы, которые есть в каждом списке
        print('Задача 1: ')
        max_array = max(a, b, c)
        print('Решение без множеств: ', end='')
        for elem in max_array:
            if elem in a and elem in b and elem in c:
                print(elem, end=' ')
    elif task_num == 2:  # Выводим на экран элементы из первого списка, которых нет во втором и третьем списках
        print('Задача 2: ')
        print('Решение без множеств: ', end='')
        for elem in a:
            if elem not in b and elem not in c:
                print(elem, end=' ')


def with_set(a, b, c, task_num):
    if task_num == 1:  # Выводим на экран елементы, которые есть в каждом списке
        sim_nums = set(a) & set(b) & set(c)
        print(f'\nРешение с множествами: {sim_nums}')
    elif task_num == 2:  # Выводим на экран элементы из первого списка, которых нет во втором и третьем списках
        diff_nums = set(a) - (set(b) | set(c))
        print(f'\nРешение с множествами: {diff_nums}')


array_1 = [1, 5, 10, 20, 40, 80, 100]
array_2 = [6, 7, 20, 80, 100]
array_3 = [3, 4, 15, 20, 30, 70, 80, 120]

no_set(array_1, array_2, array_3, 1)
with_set(array_1, array_2, array_3, 1)
no_set(array_1, array_2, array_3, 2)
with_set(array_1, array_2, array_3, 2)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module19\08_palindrome_again\main.py

def palindrome(string):
    sym_dict = {
        sym: string.count(sym)
        for sym in string
    }
    odd_count = 0
    for val in sym_dict.values():
        if int(val) % 2 != 0:
            odd_count += 1
    if odd_count > 1:
        print('Нельзя сделать палиндромом')
    else:
        print('Можно сделать палиндромом')


user_str = input('Введите строку: ')
palindrome(user_str)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module20\01_code_review\main.py

students = {
    1: {
        'name': 'Bob',
        'surname': 'Vazovski',
        'age': 23,
        'interests': ['biology, swimming']
    },
    2: {
        'name': 'Rob',
        'surname': 'Stepanov',
        'age': 24,
        'interests': ['math', 'computer games', 'running']
    },
    3: {
        'name': 'Alexander',
        'surname': 'Krug',
        'age': 22,
        'interests': ['languages', 'health food']
    }
}


def students_interest(dictionary):
    stud_interest = [interest
                     for student in dictionary.values()
                     for interest in student['interests']
                     ]
    surname_len = ''
    for student in dictionary.values():
        surname_len += ''.join(student['surname'])
    return stud_interest, surname_len


id_age = [(id_num, student['age']) for id_num, student in students.items()]
print(f'Список пар «ID студента — возраст»: {id_age}')

interest_list, all_surname = students_interest(students)

print(f'Полный список интересов всех студентов: {interest_list}\n'
      f'Общая длина всех фамилий студентов: {len(all_surname)}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module20\02_universal_prog_2\main.py

def is_prime(num):
    divider = 0
    for i in range(2, num // 2 + 1):
        if num % i == 0:
            divider += 1
    if num <= 1 or divider != 0:
        return False
    else:
        return True


def crypto(u_list):
    return list(sym for i_sym, sym in enumerate(u_list) if is_prime(i_sym))


print(crypto('О Дивный Новый мир!'))


********************************************************************************

E:\SkillBox Python\Python_Basic\Module20\03_players\main.py

players = {
    ("Ivan", "Volkin"): (10, 5, 13),
    ("Bob", "Robbin"): (7, 5, 14),
    ("Rob", "Bobbin"): (12, 8, 2)
}

players_list = [
    (player + score)
    for player, score in players.items()
]
print(players_list)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module20\04_pairs\main.py

import random
nums_list = [
    random.randint(0, 100)
    for _ in range(10)
]
new_list = [
    (val, nums_list[i+1])
    for i, val in enumerate(nums_list)
    if i < 9 and i % 2 == 0
]

print(f'Оригинальный список: {nums_list}\n'
      f'Новый список: {new_list}')


********************************************************************************

E:\SkillBox Python\Python_Basic\Module20\05_sort_function\main.py

def tpl_sort(tpl):
    tpl_list = list(tpl)
    float_flag = False
    for _, num in enumerate(tpl_list):
        if isinstance(num, float):
            float_flag = True
    if float_flag:
        return tuple(tpl)
    else:
        for index_1 in range(len(tpl_list)):
            for index_2 in range(index_1 + 1, len(tpl_list)):
                if tpl_list[index_1] >= tpl_list[index_2]:
                    tpl_list[index_1], tpl_list[index_2] = tpl_list[index_2], tpl_list[index_1]
        return tuple(tpl_list)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module20\06_contacts_3\main.py

def add_contact(dictionary):
    name, surname = input('Введите имя и фамилию нового контакта (через пробел): ').title().split()
    if (name, surname) in dictionary.keys():
        print(f'Такой человек уже есть в контактах.\n'
              f'Текущий словарь контактов: {dictionary}')
    else:
        phone_num = input('Введите номер телефона: ')
        dictionary[(name, surname)] = phone_num
        print(f'Текущий словарь контактов: {dictionary}')


def search_contact(dictionary):
    surname = input('Введите фамилию для поиска: ').title()
    for person in dictionary:
        if surname in person:
            print(f'{person[0]} {person[1]}: {dictionary[person]}')
        else:
            print(f'Человека с фамилией {surname} нет в списке контактов.')


phone_dict = {}
while True:
    print('Введите номер действия\n'
          '\t1. Добавить контакт\n'
          '\t2. Найти человека')
    answer = input()
    if answer == '1':
        add_contact(phone_dict)
    elif answer == '2':
        search_contact(phone_dict)
    else:
        break


********************************************************************************

E:\SkillBox Python\Python_Basic\Module20\07_my_zip\main.py

def my_zip(l1, l2):
    if isinstance(l1, dict):
        my_gen = (
            (key, l2[i])
            for i in range(min(len(l1.keys()), len(l2)))
            for i_key, key in enumerate(l1.keys())
            if i_key == i
        )
    elif isinstance(l2, dict):
        my_gen = (
            (l1[i], key)
            for i in range(min(len(l1), len(l2.keys())))
            for i_key, key in enumerate(l2.keys())
            if i_key == i
        )
    else:
        my_gen = (
            (l1[i], l2[i])
            for i in range(min(len(l1), len(l2)))
        )
    return my_gen


test_dict = {
    1: 'a',
    2: 'b',
    3: 'c'
}
test_str = 'abcd'
test_list = [20, 30, 40, 50, 20]

print(my_zip(test_dict, test_list))
for elem in my_zip(test_list, test_dict):
    print(elem)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module21\01_challenge_2\main.py

def all_num(num):
    if num == 1:
        print(num)
    else:
        all_num(num - 1)
        print(num)


user_num = int(input('Введите число: '))
all_num(user_num)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module21\02_search_element_2\main.py

site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}


def dict_depth(dictionary, depth=0):
    """Функция определяет глубину вложенности словаря"""
    if not isinstance(dictionary, dict) or not dictionary:
        return depth
    return max(dict_depth(val, depth+1) for key, val in dictionary.items())


def search_elem(tag, structure, depth_lvl=None):
    """Функция ищет ключ до глубины depth_lvl, если глубина не указана, то ищет
    по всему словарю"""
    result = None
    depth_lvl = depth_lvl or dict_depth(structure)
    if tag in structure:
        return structure[tag]
    for key, val in structure.items():
        if isinstance(val, dict) and depth_lvl > 1:
            result = search_elem(tag, val, depth_lvl - 1)
            if result:
                return result
    return result


user_input = input('Искомый ключ: ')
answer = input('Хотите ввести максимальную глубину? Y/N: ')
if answer.lower() == 'n':
    res = search_elem(user_input, site)
    print(f'Значение ключа: {res}')
if answer.lower() == 'y':
    udl = int(input('Введите максимальную глубину: '))
    print(search_elem(user_input, site, udl))



********************************************************************************

E:\SkillBox Python\Python_Basic\Module21\03_deep_copy\main.py

import copy
import json

brand = 'телефон'
site = {
    'html': {
        'head': {
            'title': f'Куплю/продам {brand} недорого'
        },
        'body': {
            'h2': f'У нас самая низкая цена на {brand}',
            'div': 'Купить',
            'p': 'продать'
        }
    }
}


def change_brand(data, tag_1, tag_2, product):
    if tag_1 in data:
        data[tag_1] = f'Куплю/продам {product} недорого'
    elif tag_2 in data:
        data[tag_2] = f'У нас самая низкая цена на {product}'
    for key, value in data.items():
        if isinstance(value, dict):
            change_brand(value, tag_1, tag_2, product)
    return data


def create_sites_dict(q_sites, data=None):
    data = data or site
    sites_dict = dict()
    for _ in range(q_sites):
        new_brand = input('Введите название продукта для нового сайта: ')
        sites_dict[new_brand] = change_brand(copy.deepcopy(data), 'title', 'h2', new_brand)
        for key, val in sites_dict.items():
            print(f'Сайт для {key}: \n', json.dumps(val, ensure_ascii=False, indent=4))
    return sites_dict


sites_quantity = int(input('Сколько сайтов: '))
new_sites = create_sites_dict(sites_quantity)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module21\04_advanced_sum\main.py

def super_sum(*args):
    result = 0
    for elem in args:
        if isinstance(elem, (int, float)):
            result += elem
        else:
            for i, val in enumerate(elem):
                result += super_sum(val)
    return result



********************************************************************************

E:\SkillBox Python\Python_Basic\Module21\05_list_of_lists_2\main.py

nice_list = [1, 2, [3, 4], [[5, 6, 7], [8, 9, 10]], [[11, 12, 13], [14, 15], [16, 17, 18]]]


def unfold_lists(a_list):
    result = []
    for e in a_list:
        if isinstance(e, int):
            result.append(e)
        else:
            result.extend(unfold_lists(e))
    return result


nice_list = unfold_lists(nice_list)

print(nice_list)


********************************************************************************

E:\SkillBox Python\Python_Basic\Module21\06_quick_sort\main.py

# Function to find the partition position
def partition(array, low, high):
    # Choose the rightmost element as pivot
    pivot = array[high]

    # Pointer for greater element
    i = low - 1

    # Traverse through all elements
    # compare each element with pivot
    for j in range(low, high):
        if array[j] <= pivot:
            # If element smaller than pivot is found
            # swap it with the greater element pointed by i
            i = i + 1

            # Swapping element at i with element at j
            (array[i], array[j]) = (array[j], array[i])

    # Swap the pivot element with
    # e greater element specified by i
    (array[i + 1], array[high]) = (array[high], array[i + 1])

    # Return the position from where partition is done
    return i + 1


# Function to perform quicksort


def quick_sort(array, low, high):
    if low < high:
        # Find pivot element such that
        # element smaller than pivot are on the left
        # element greater than pivot are on the right
        pi = partition(array, low, high)

        # Recursive call on the left of pivot
        quick_sort(array, low, pi - 1)

        # Recursive call on the right of pivot
        quick_sort(array, pi + 1, high)



# Driver code
array = [10, 7, 8, 9, 1, 5]
quick_sort(array, 0, len(array) - 1)

print(f'Sorted array: {array}')

# This code is contributed by Adnan Aliakbar


********************************************************************************

E:\SkillBox Python\Python_Basic\OS\less_9_1.py

import os


def print_dirs(proj):
    print('\nСодержимое дирректории', proj)
    for elem in os.listdir(proj):
        path = os.path.join(proj, elem)
        print('   ', path)


file_name = 'admin.bat'
folder_name = 'access'
relative_path = os.path.join('../..', folder_name, file_name)
abs_path = os.path.abspath(os.path.join(file_name))
print(relative_path)
print(abs_path)

projects_list = ['Projects', 'Python_basic']
for project in projects_list:
    path_to_project = os.path.abspath(os.path.join('../..', project))
    print_dirs(path_to_project)


print("Корень диска:", os.path.abspath(os.sep))

********************************************************************************

E:\SkillBox Python\Python_Basic\OS\less_9_2.py

import os
import random


def find_obj(cur_path, obj_name):
    """Функция поиска файла"""
    paths_list = []
    for elem in os.listdir(cur_path):
        path = os.path.join(cur_path, elem)
        if obj_name == elem:
            paths_list.append(path)
        if os.path.isdir(path):
            result = find_obj(path, obj_name)
            if result:
                paths_list.extend(result)
    return paths_list


find_objects = find_obj(os.path.abspath(os.path.join(os.sep, 'SkillBox Python')), 'README.md')

rand_num = random.randint(1, 10)
file = open(find_objects[rand_num], 'r', encoding='utf-8')
print(file.name)
for line in file:
    print(line, end='')
file.close()
history_file = open('history_search.txt', 'w')
for path in find_objects:
    history_file.write(path)
    history_file.write('\n')
history_file.close()
# object_name = 'less_9_1'
# abs_path = os.path.abspath(os.path.join(object_name))
# if os.path.exists(abs_path):
#     if os.path.isdir(abs_path):
#         print(f'{abs_path} - это папка')
#     elif os.path.isfile(abs_path):
#         print(f'{abs_path} - это файл')
#         print(f'Размер файла: {os.path.getsize(object_name)}')
# else:
#     print('Обьект не найден')


********************************************************************************

E:\SkillBox Python\Python_Basic\OS\less_9_3.py

import os
work_file_1 = os.path.abspath(os.path.join(os.sep, 'Task', 'Additional_info', 'group_1.txt'))
work_file_2 = os.path.abspath(os.path.join(os.sep, 'Task', 'Additional_info', 'group_2.txt'))

file = open(work_file_1, 'r', encoding='utf8')
summ = 0
diff = 0
compose = 1
for line in file:
    info = line.split()
    summ += int(info[2])
    diff -= int(info[2])
print(f'Сумма очков первой группы: {summ}\n'
      f'Разность очков первой группы: {diff}')
file.close()
file = open(work_file_2, 'r', encoding='utf8')
for line in file:
    info = line.split()
    compose *= int(info[2])
print(f'Произведение очков второй группы: {compose}')
file.close()



********************************************************************************

E:\SkillBox Python\Python_Basic\OS\less_9_4.py

import os


def find_obj(cur_path, ending):
    """Функция поиска файла"""
    paths_list = []
    for elem in os.listdir(cur_path):
        path = os.path.join(cur_path, elem)
        if elem.endswith(ending):
            paths_list.append(path)
        if os.path.isdir(path):
            result = find_obj(path, ending)
            if result:
                paths_list.extend(result)
    return paths_list


def get_text_from_file(path_to_file):
    file = open(path_to_file, 'r', encoding='utf-8')
    text = file.name + '\n\n'
    for line in file:
        text += line
    file.close()
    return text


work_dir = os.path.abspath(os.path.join(os.sep, 'SkillBox Python', 'Python_Basic'))

find_objects = find_obj(work_dir, '.py')
write_file = open('scripts.txt', 'w', encoding='utf-8')
for path in find_objects:
    write_file.write(get_text_from_file(path) + '\n'*2 + '*'*80 + '\n'*2)
write_file.close()


********************************************************************************

E:\SkillBox Python\Python_Basic\test.py

tpl = (10, 20, 30, 40)
for elem in tpl:
    print(elem)

********************************************************************************

